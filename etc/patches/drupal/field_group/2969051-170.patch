diff --git a/formatters/tabs/tabs.js b/formatters/tabs/tabs.js
index ff6afa8..24e0148 100644
--- a/formatters/tabs/tabs.js
+++ b/formatters/tabs/tabs.js
@@ -3,7 +3,7 @@
  * Provides the processing logic for tabs.
  */
 
-(($) => {
+(($, once) => {
   Drupal.FieldGroup = Drupal.FieldGroup || {};
   Drupal.FieldGroup.Effects = Drupal.FieldGroup.Effects || {};
 
@@ -51,7 +51,70 @@
               },
             );
           });
+
+        // Handle tab changes on HTML 5 validation.
+        handleHtml5Validation(context);
       }
     },
   };
-})(jQuery);
+
+  /**
+   * Switches to the tab of the first invalid field after HTML 5 validation.
+   */
+  function handleHtml5Validation(context) {
+    // Check if browser supports HTML5 validation.
+    if (typeof $('<input>')[0].checkValidity !== 'function') {
+      return;
+    }
+
+    // Can't use .submit() because HTML validation prevents it from running.
+    $(once('showTabWithError', '.form-submit:not([formnovalidate])', context)).on('click', function() {
+      var $this = $(this);
+      var $form = $this.closest('form');
+
+      // Support themes where the submit button is separated from the form
+      // like the Gin theme.
+      if (!$form.length) {
+        let $form_id = $this.attr('form')
+        $form = $('#' + $form_id)
+      }
+
+      // Exit early if we can't find a form or the form has no tabs.
+      if ($form.length === 0 || $form.find('.field-group-tab').length === 0) {
+        return;
+      }
+
+      // Check validity of each form element.
+      $($form[0].elements).each(function () {
+        if (this.checkValidity && !this.checkValidity()) {
+          // Set focus to the first invalid tab.
+          var $tab = $(this).closest('.field-group-tab');
+          if ($tab.length === 0) {
+            return false;
+          }
+
+          // Fetching all parents in case of nested tabs and focusing on them.
+          var $allParents = $tab.parents('.field-group-tab');
+          Object.keys($allParents).forEach(function(key) {
+            if (key !== 'length' && key !== 'prevObject') {
+              // jQuery .parents() returns parent elements from innermost to
+              // outermost matches. We need to focus in reverse order to
+              // bring the element in view.
+              var element = $allParents[$allParents.length - 1 - parseInt(key)];
+              Drupal.FieldGroup.setGroupWithFocus($(element));
+              var parentDirection = $(element).hasClass('vertical-tabs__pane') ? 'vertical' : 'horizontal';
+              $(element).data(parentDirection + 'Tab').focus();
+            }
+          });
+
+          // Finally, putting focus on error field.
+          var direction = $tab.hasClass('vertical-tabs__pane') ? 'vertical' : 'horizontal';
+          Drupal.FieldGroup.setGroupWithFocus($tab);
+          $tab.data(direction + 'Tab').focus();
+          return false;
+        }
+      });
+    });
+  }
+
+})(jQuery, once);
diff --git a/tests/src/FunctionalJavascript/TabsValidationTest.php b/tests/src/FunctionalJavascript/TabsValidationTest.php
new file mode 100644
index 0000000..b1f91bc
--- /dev/null
+++ b/tests/src/FunctionalJavascript/TabsValidationTest.php
@@ -0,0 +1,162 @@
+<?php
+
+namespace Drupal\Tests\field_group\FunctionalJavascript;
+
+use Drupal\Core\Url;
+use Drupal\field\FieldStorageConfigInterface;
+use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
+use Drupal\Tests\field_group\Functional\FieldGroupTestTrait;
+
+/**
+ * Tests HTML5 validation on fields in tabs.
+ *
+ * @group field_group
+ */
+class TabsValidationTest extends WebDriverTestBase {
+
+  use FieldGroupTestTrait;
+
+  /**
+   * {@inheritdoc}
+   */
+  protected $defaultTheme = 'stark';
+
+  /**
+   * Modules to enable.
+   *
+   * @var array
+   */
+  protected static $modules = [
+    'field_group',
+    'node',
+    'user',
+  ];
+
+  /**
+   * The node type used for testing.
+   *
+   * @var \Drupal\node\NodeTypeInterface
+   */
+  protected $testNodeType;
+
+  /**
+   * {@inheritdoc}
+   */
+  public function setUp(): void {
+    parent::setUp();
+
+    $this->testNodeType = $this->drupalCreateContentType([
+      'type' => 'test_node_bundle',
+      'name' => 'Test Node Type',
+    ]);
+
+    // Add an extra field to the test content type.
+    $entity_type_manager = $this->container->get('entity_type.manager');
+    $field_storage = $entity_type_manager
+      ->getStorage('field_storage_config')
+      ->create([
+        'type' => 'string',
+        'field_name' => 'test_label',
+        'entity_type' => 'node',
+      ]);
+    assert($field_storage instanceof FieldStorageConfigInterface);
+    $field_storage->save();
+
+    $entity_type_manager->getStorage('field_config')
+      ->create([
+        'label' => 'Test label',
+        'field_storage' => $field_storage,
+        'bundle' => $this->testNodeType->id(),
+        'required' => TRUE,
+      ])
+      ->save();
+
+    $tab1 = [
+      'label' => 'Tab1',
+      'group_name' => 'group_tab1',
+      'weight' => '1',
+      'children' => [
+        0 => 'body',
+      ],
+      'format_type' => 'tab',
+      'format_settings' => [
+        'label' => 'Tab1',
+        'formatter' => 'open',
+      ],
+    ];
+    $this->createGroup('node', $this->testNodeType->id(), 'form', 'default', $tab1);
+
+    $tab2 = [
+      'label' => 'Tab2',
+      'group_name' => 'group_tab2',
+      'weight' => '2',
+      'children' => [
+        0 => 'test_label',
+      ],
+      'format_type' => 'tab',
+      'format_settings' => [
+        'label' => 'Tab2',
+        'formatter' => 'closed',
+      ],
+    ];
+    $this->createGroup('node', $this->testNodeType->id(), 'form', 'default', $tab2);
+
+    $horizontal_tabs = [
+      'label' => 'Horizontal tabs',
+      'group_name' => 'group_horizontal_tabs',
+      'weight' => '-5',
+      'children' => [
+        'group_tab1',
+        'group_tab2',
+      ],
+      'format_type' => 'tabs',
+      'format_settings' => [
+        'direction' => 'horizontal',
+        'label' => 'Horizontal tabs',
+      ],
+    ];
+    $this->createGroup('node', $this->testNodeType->id(), 'form', 'default', $horizontal_tabs);
+
+    $entity_type_manager->getStorage('entity_form_display')
+      ->load(implode('.', [
+        'node',
+        $this->testNodeType->id(),
+        'default',
+      ]))
+      ->setComponent('test_label', ['weight' => '1'])
+      ->save();
+  }
+
+  /**
+   * Tests tabs validation.
+   */
+  public function testTabsValidation() {
+    $page = $this->getSession()->getPage();
+    $this->drupalLogin($this->rootUser);
+
+    $this->drupalGet(Url::fromRoute('node.add', [
+      'node_type' => $this->testNodeType->id(),
+    ]));
+
+    $titleField = $page->findField('title[0][value]');
+    $labelField = $page->findField('test_label[0][value]');
+    $submitButton = $page->findButton('edit-submit');
+    $title = $this->randomMachineName();
+
+    // Submit the form, the browser should try to validate the Title field.
+    $submitButton->click();
+    $this->assertTrue($titleField->isVisible(), 'Title is visible');
+    $this->assertFalse($labelField->isVisible(), 'Label is not visible');
+
+    // Populate the title and submit again. The label field should be displayed.
+    $titleField->setValue($title);
+    $submitButton->click();
+    $this->assertTrue($labelField->isVisible(), 'Label is visible');
+
+    // Populate the label field. We should be able to submit now.
+    $labelField->setValue($this->randomMachineName());
+    $submitButton->click();
+    $this->assertTrue($this->assertSession()->waitForText(sprintf('Test Node Type %s has been created', $title)));
+  }
+
+}
