diff --git a/ckeditor.module b/ckeditor.module
index 477bf81..f7382c8 100644
--- a/ckeditor.module
+++ b/ckeditor.module
@@ -194,6 +194,15 @@ function ckeditor_library_info_alter(&$libraries, $extension) {
       'dependencies' => ['ckeditor/ckeditor'],
     ];
   }
+
+    if ($extension === 'core') {
+    // Fix the CKEditor 4 focus management in dialogs. Modify the library
+    // declaration to ensure this file is always loaded after
+    // drupal.dialog.jquery-ui.js.
+    $module_path = Drupal::moduleHandler()->getModule('ckeditor')->getPath();
+    $file_path = '/' . $module_path . '/js/ckeditor.dialog.fix.js';
+    $libraries['drupal.dialog']['js'][$file_path] = [];
+  }
 }

 /**
diff --git a/js/ckeditor.dialog.fix.es6.js b/js/ckeditor.dialog.fix.es6.js
new file mode 100644
index 0000000..05242a1
--- /dev/null
+++ b/js/ckeditor.dialog.fix.es6.js
@@ -0,0 +1,20 @@
+/**
+ * @file
+ * This file overrides the way jQuery UI focus trap works.
+ *
+ * When a focus event is fired while a CKEditor 4 instance is focused, do not
+ * trap the focus and let CKEditor 4 manage that focus.
+ */
+
+(($) => {
+  $.widget('ui.dialog', $.ui.dialog, {
+    // Override core override of jQuery UI's `_allowInteraction()` so that
+    // CKEditor 4 in modals can work as expected.
+    // @see https://api.jqueryui.com/dialog/#method-_allowInteraction
+    _allowInteraction(event) {
+      return (
+        $(event.target).closest('.cke_dialog').length || this._super(event)
+      );
+    },
+  });
+})(jQuery);
diff --git a/js/ckeditor.dialog.fix.js b/js/ckeditor.dialog.fix.js
new file mode 100644
index 0000000..838ea34
--- /dev/null
+++ b/js/ckeditor.dialog.fix.js
@@ -0,0 +1,14 @@
+/**
+* DO NOT EDIT THIS FILE.
+* See the following change record for more information,
+* https://www.drupal.org/node/2815083
+* @preserve
+**/
+
+(function ($) {
+  $.widget('ui.dialog', $.ui.dialog, {
+    _allowInteraction: function _allowInteraction(event) {
+      return $(event.target).closest('.cke_dialog').length || this._super(event);
+    }
+  });
+})(jQuery);
\ No newline at end of file
diff --git a/tests/modules/ckeditor_test.routing.yml b/tests/modules/ckeditor_test.routing.yml
index 01aeca0..18b64d3 100644
--- a/tests/modules/ckeditor_test.routing.yml
+++ b/tests/modules/ckeditor_test.routing.yml
@@ -12,3 +12,10 @@ ckeditor_test.off_canvas:
     _controller: '\Drupal\ckeditor_test\CkeditorOffCanvasTestController::testOffCanvas'
   requirements:
     _access: 'TRUE'
+
+ckeditor_test.dialog:
+  path: '/ckeditor_test/dialog'
+  defaults:
+    _controller: '\Drupal\ckeditor_test\CkeditorDialogTestController::testDialog'
+  requirements:
+    _access: 'TRUE'
\ No newline at end of file
diff --git a/tests/modules/src/CkeditorDialogTestController.php b/tests/modules/src/CkeditorDialogTestController.php
new file mode 100644
index 0000000..93e01e4
--- /dev/null
+++ b/tests/modules/src/CkeditorDialogTestController.php
@@ -0,0 +1,40 @@
+<?php
+
+namespace Drupal\ckeditor_test;
+
+use Drupal\Component\Serialization\Json;
+use Drupal\Core\Url;
+
+/**
+ * Provides controller for testing CKEditor in jQuery UI dialogs.
+ */
+class CkeditorDialogTestController {
+
+  /**
+   * Returns a link that can open a node add form in a modal dialog.
+   *
+   * @return array
+   *   A render array.
+   */
+  public function testDialog() {
+    $build['link'] = [
+      '#type' => 'link',
+      '#title' => 'Add Node',
+      '#url' => Url::fromRoute('node.add', ['node_type' => 'page']),
+      '#attributes' => [
+        'class' => ['use-ajax'],
+        'data-dialog-type' => 'modal',
+        'data-dialog-options' => Json::encode([
+          'width' => 700,
+        ]),
+      ],
+    ];
+    $build['#attached']['library'][] = 'core/drupal.dialog.ajax';
+    // Add this library to prevent Modernizr from triggering a deprecation
+    // notice during testing.
+    // @todo remove in https://www.drupal.org/project/drupal/issues/3269082.
+    $build['#attached']['library'][] = 'core/drupal.touchevents-test';
+    return $build;
+  }
+
+}
diff --git a/tests/src/FunctionalJavascript/CKEditorDialogTest.php b/tests/src/FunctionalJavascript/CKEditorDialogTest.php
new file mode 100644
index 0000000..f122207
--- /dev/null
+++ b/tests/src/FunctionalJavascript/CKEditorDialogTest.php
@@ -0,0 +1,110 @@
+<?php
+
+namespace Drupal\Tests\ckeditor\FunctionalJavascript;
+
+use Drupal\Core\Entity\Entity\EntityFormDisplay;
+use Drupal\editor\Entity\Editor;
+use Drupal\field\Entity\FieldConfig;
+use Drupal\field\Entity\FieldStorageConfig;
+use Drupal\filter\Entity\FilterFormat;
+use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
+use Drupal\node\Entity\NodeType;
+use Drupal\Tests\ckeditor\Traits\CKEditorTestTrait;
+
+/**
+ * Tests for CKEditor 4 to ensure correct focus management in dialogs.
+ *
+ * @group ckeditor5
+ * @internal
+ */
+class CKEditorDialogTest extends WebDriverTestBase {
+
+  use CKEditorTestTrait;
+
+  /**
+   * {@inheritdoc}
+   */
+  protected $defaultTheme = 'stark';
+
+  /**
+   * {@inheritdoc}
+   */
+  protected static $modules = ['node', 'ckeditor', 'filter', 'ckeditor_test'];
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function setUp(): void {
+    parent::setUp();
+
+    // Create a text format and associate CKEditor.
+    FilterFormat::create([
+      'format' => 'filtered_html',
+      'name' => 'Filtered HTML',
+      'weight' => 0,
+    ])->save();
+
+    $editor = Editor::create([
+      'format' => 'filtered_html',
+      'editor' => 'ckeditor',
+    ]);
+
+    // Add the table button.
+    $settings = $editor->getSettings();
+    $settings['toolbar']['rows'][0][0]['items'][] = 'Table';
+    $editor->setSettings($settings);
+    $editor->save();
+
+    // Create a node type for testing.
+    NodeType::create(['type' => 'page', 'name' => 'page'])->save();
+
+    $field_storage = FieldStorageConfig::loadByName('node', 'body');
+
+    // Create a body field instance for the 'page' node type.
+    FieldConfig::create([
+      'field_storage' => $field_storage,
+      'bundle' => 'page',
+      'label' => 'Body',
+      'settings' => ['display_summary' => TRUE],
+      'required' => TRUE,
+    ])->save();
+
+    // Assign widget settings for the 'default' form mode.
+    EntityFormDisplay::create([
+      'targetEntityType' => 'node',
+      'bundle' => 'page',
+      'mode' => 'default',
+      'status' => TRUE,
+    ])->setComponent('body', ['type' => 'text_textarea_with_summary'])
+      ->save();
+
+    $this->drupalLogin($this->drupalCreateUser([
+      'administer nodes',
+      'create page content',
+      'use text format filtered_html',
+    ]));
+  }
+
+  /**
+   * Tests if CKEditor 4 dialogs can be interacted within jQueryUI dialogs.
+   */
+  public function testCKEditorFocusInCkeditorDialogWithinJqueryDialog() {
+    $assert_session = $this->assertSession();
+    $page = $this->getSession()->getPage();
+
+    $this->drupalGet('/ckeditor_test/dialog');
+
+    // Open the dialog modal.
+    $page->clickLink('Add Node');
+    $assert_session->waitForElementVisible('css', '.ui-dialog');
+    $assert_session->assertWaitOnAjaxRequest();
+
+    // Click the table button.
+    $assert_session->elementExists('css', '.cke_button__table');
+    $this->click('.cke_button__table');
+
+    // Fill the rows field.
+    $page->fillField('Rows', 4);
+  }
+
+}
