diff --git a/core/modules/layout_builder/css/layout-builder.css b/core/modules/layout_builder/css/layout-builder.css
index d4c48248de..135cd10a6b 100644
--- a/core/modules/layout_builder/css/layout-builder.css
+++ b/core/modules/layout_builder/css/layout-builder.css
@@ -175,6 +175,7 @@
  * @todo create issue for todo.
  */
 
-.layout-builder-components-table .tabledrag-changed-warning {
+.layout-builder-components-table .tabledrag-changed-warning,
+.layout-builder-sections-table .tabledrag-changed-warning {
   display: none !important;
 }
diff --git a/core/modules/layout_builder/css/layout-builder.pcss.css b/core/modules/layout_builder/css/layout-builder.pcss.css
index 7ddb9543e0..ec36afea56 100644
--- a/core/modules/layout_builder/css/layout-builder.pcss.css
+++ b/core/modules/layout_builder/css/layout-builder.pcss.css
@@ -163,6 +163,7 @@
  * unsaved changes until "Save layout" is submitted.
  * @todo create issue for todo.
  */
-.layout-builder-components-table .tabledrag-changed-warning {
+.layout-builder-components-table .tabledrag-changed-warning,
+.layout-builder-sections-table .tabledrag-changed-warning {
   display: none !important;
 }
diff --git a/core/modules/layout_builder/layout_builder.post_update.php b/core/modules/layout_builder/layout_builder.post_update.php
index ba9288305a..56b3d11a01 100644
--- a/core/modules/layout_builder/layout_builder.post_update.php
+++ b/core/modules/layout_builder/layout_builder.post_update.php
@@ -179,3 +179,10 @@ function layout_builder_post_update_section_component_third_party(?array &$sandb
 
   $config_entity_updater->update($sandbox, 'entity_view_display', $callback);
 }
+
+/**
+ * Clear caches due to new routes and UI elements.
+ */
+function layout_builder_post_update_section_move_form() {
+  // Empty post-update hook.
+}
diff --git a/core/modules/layout_builder/layout_builder.routing.yml b/core/modules/layout_builder/layout_builder.routing.yml
index 5db3e9692b..8386719589 100644
--- a/core/modules/layout_builder/layout_builder.routing.yml
+++ b/core/modules/layout_builder/layout_builder.routing.yml
@@ -42,6 +42,19 @@ layout_builder.configure_section:
       section_storage:
         layout_builder_tempstore: TRUE
 
+layout_builder.move_sections_form:
+  path: '/layout_builder/move/sections/{section_storage_type}/{section_storage}'
+  defaults:
+    _title: 'Reorder sections'
+    _form: '\Drupal\layout_builder\Form\MoveSectionsForm'
+  requirements:
+    _layout_builder_access: 'view'
+  options:
+    _admin_route: TRUE
+    parameters:
+      section_storage:
+        layout_builder_tempstore: TRUE
+
 layout_builder.remove_section:
   path: '/layout_builder/remove/section/{section_storage_type}/{section_storage}/{delta}'
   defaults:
diff --git a/core/modules/layout_builder/src/Form/LayoutBuilderEntityFormTrait.php b/core/modules/layout_builder/src/Form/LayoutBuilderEntityFormTrait.php
index c7e89af2c4..e93cd787db 100644
--- a/core/modules/layout_builder/src/Form/LayoutBuilderEntityFormTrait.php
+++ b/core/modules/layout_builder/src/Form/LayoutBuilderEntityFormTrait.php
@@ -4,6 +4,7 @@
 
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\Core\Url;
 use Drupal\layout_builder\SectionStorageInterface;
 
 /**
@@ -88,6 +89,27 @@ protected function buildActions(array $actions): array {
       '#submit' => ['::redirectOnSubmit'],
       '#redirect' => 'discard_changes',
     ];
+    $actions['move_sections'] = [
+      '#type' => 'link',
+      '#title' => $this->t('Reorder sections'),
+      '#url' => Url::fromRoute('layout_builder.move_sections_form',
+        [
+          'section_storage_type' => $this->sectionStorage->getStorageType(),
+          'section_storage' => $this->sectionStorage->getStorageId(),
+        ],
+        [
+          'attributes' => [
+            'class' => [
+              'use-ajax',
+              'button',
+            ],
+            'data-dialog-type' => 'dialog',
+            'data-dialog-renderer' => 'off_canvas',
+            'data-disable-refocus' => 'true',
+          ],
+        ]
+      ),
+    ];
     $actions['preview_toggle'] = $this->buildContentPreviewToggle();
     return $actions;
   }
diff --git a/core/modules/layout_builder/src/Form/MoveSectionsForm.php b/core/modules/layout_builder/src/Form/MoveSectionsForm.php
new file mode 100644
index 0000000000..f1537fc03e
--- /dev/null
+++ b/core/modules/layout_builder/src/Form/MoveSectionsForm.php
@@ -0,0 +1,203 @@
+<?php
+
+namespace Drupal\layout_builder\Form;
+
+use Drupal\Core\Ajax\AjaxFormHelperTrait;
+use Drupal\Core\Form\FormBase;
+use Drupal\Core\Form\FormStateInterface;
+use Drupal\layout_builder\Controller\LayoutRebuildTrait;
+use Drupal\layout_builder\LayoutBuilderHighlightTrait;
+use Drupal\layout_builder\LayoutTempstoreRepositoryInterface;
+use Drupal\layout_builder\SectionStorageInterface;
+use Symfony\Component\DependencyInjection\ContainerInterface;
+
+/**
+ * Provides a form for moving a section.
+ *
+ * @internal
+ *   Form classes are internal.
+ */
+class MoveSectionsForm extends FormBase {
+
+  use AjaxFormHelperTrait;
+  use LayoutBuilderHighlightTrait;
+  use LayoutRebuildTrait;
+
+  /**
+   * The section storage.
+   *
+   * @var \Drupal\layout_builder\SectionStorageInterface
+   */
+  protected $sectionStorage;
+
+  /**
+   * The Layout Tempstore.
+   *
+   * @var \Drupal\layout_builder\LayoutTempstoreRepositoryInterface
+   */
+  protected $layoutTempstore;
+
+  /**
+   * Constructs a new MoveSectionsForm.
+   *
+   * @param \Drupal\layout_builder\LayoutTempstoreRepositoryInterface $layout_tempstore_repository
+   *   The layout tempstore.
+   */
+  public function __construct(LayoutTempstoreRepositoryInterface $layout_tempstore_repository) {
+    $this->layoutTempstore = $layout_tempstore_repository;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function create(ContainerInterface $container) {
+    return new static(
+      $container->get('layout_builder.tempstore_repository')
+    );
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getFormId() {
+    return 'layout_builder_section_move';
+  }
+
+  /**
+   * Builds the move section form.
+   *
+   * @param array $form
+   *   An associative array containing the structure of the form.
+   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   *   The current state of the form.
+   * @param \Drupal\layout_builder\SectionStorageInterface $section_storage
+   *   The section storage being configured.
+   *
+   * @return array
+   *   The form array.
+   */
+  public function buildForm(array $form, FormStateInterface $form_state, SectionStorageInterface $section_storage = NULL) {
+    $this->sectionStorage = $section_storage;
+
+    $storage_label = $section_storage->label();
+    $aria_label = $this->t('Sections in @storage_label layout', ['@storage_label' => $storage_label]);
+
+    $form['sections_wrapper']['sections'] = [
+      '#type' => 'table',
+      '#header' => [
+        $this->t('Sections'),
+        $this->t('Delta'),
+      ],
+      '#tabledrag' => [
+        [
+          'action' => 'order',
+          'relationship' => 'sibling',
+          'group' => 'table-sort-delta',
+        ],
+      ],
+      '#theme_wrappers' => [
+        'container' => [
+          '#attributes' => [
+            'id' => 'layout-builder-sections-table',
+            'class' => ['layout-builder-sections-table'],
+            'aria-label' => $aria_label,
+          ],
+        ],
+      ],
+    ];
+
+    $sections = $section_storage->getSections();
+
+    foreach ($sections as $section_delta => $section) {
+      $row_classes = [
+        'draggable',
+        'layout-builder-sections-table__row',
+      ];
+
+      $layout_settings = $section->getLayoutSettings();
+      $section_label = !empty($layout_settings['label']) ? $layout_settings['label'] : $this->t('Section @section', ['@section' => $section_delta + 1]);
+
+      $label = [
+        '#markup' => $section_label,
+        '#wrapper_attributes' => ['class' => ['layout-builder-sections-table__section-label']],
+      ];
+
+      $form['sections_wrapper']['sections'][$section_delta] = [
+        '#attributes' => ['class' => $row_classes],
+        'label' => $label,
+        'delta' => [
+          '#type' => 'select',
+          '#options' => range(0, count($sections) - 1),
+          '#default_value' => $section_delta,
+          '#title' => $this->t('Delta for @section section', ['@section' => $section_label]),
+          '#title_display' => 'invisible',
+          '#attributes' => [
+            'class' => ['table-sort-delta'],
+          ],
+        ],
+      ];
+
+    }
+
+    $form['actions']['submit'] = [
+      '#type' => 'submit',
+      '#value' => $this->t('Reorder'),
+      '#button_type' => 'primary',
+    ];
+
+    $form['#attributes']['data-add-layout-builder-wrapper'] = 'layout-builder--move-sections-active';
+
+    if ($this->isAjax()) {
+      $form['actions']['submit']['#ajax']['callback'] = '::ajaxSubmit';
+    }
+    return $form;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function submitForm(array &$form, FormStateInterface $form_state) {
+    $new_deltas = $this->getNewDeltas($form_state);
+    if (count($new_deltas)) {
+      $sections = $this->sectionStorage->getSections();
+      // Create a numeric array with the section deltas reordered.
+      $deltas = array_combine(array_keys($new_deltas), array_column($new_deltas, 'delta'));
+      asort($deltas);
+      $order = array_keys($deltas);
+      // Reorder sections.
+      $sections = array_map(function ($delta) use ($sections) {
+        return $sections[$delta];
+      }, $order);
+      $this->sectionStorage->removeAllSections();
+      foreach ($sections as $section) {
+        $this->sectionStorage->appendSection($section);
+      }
+      $this->layoutTempstore->set($this->sectionStorage);
+    }
+
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function successfulAjaxSubmit(array $form, FormStateInterface $form_state) {
+    return $this->rebuildAndClose($this->sectionStorage);
+  }
+
+  /**
+   * Gets the submitted section deltas.
+   *
+   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   *   The form state.
+   *
+   * @return array
+   *   The section deltas.
+   */
+  protected function getNewDeltas(FormStateInterface $form_state) {
+    if ($form_state->hasValue('sections')) {
+      return $form_state->getValue('sections');
+    }
+    return [];
+  }
+
+}
diff --git a/core/themes/stable9/css/layout_builder/layout-builder.css b/core/themes/stable9/css/layout_builder/layout-builder.css
index e0073dd90e..365c426448 100644
--- a/core/themes/stable9/css/layout_builder/layout-builder.css
+++ b/core/themes/stable9/css/layout_builder/layout-builder.css
@@ -175,11 +175,12 @@
 
 /**
  * @todo remove in https://www.drupal.org/project/drupal/issues/3042127
- *   This rule ensures the row weight dropdowns in the Move Block dialog
+ *   Ensure the row weight dropdowns in the Move Block & Sections dialogs
  *   maintain the background color of their container when they are hovered
  *   over or are inside the active row.
  */
-#drupal-off-canvas .layout-builder-components-table__row .form-item {
+#drupal-off-canvas .layout-builder-components-table__row .form-item,
+#drupal-off-canvas .layout-builder-sections-table__row .form-item {
   background-color: transparent;
 }
 
@@ -207,6 +208,7 @@
  * unsaved changes until "Save layout" is submitted.
  * @todo create issue for todo.
  */
-.layout-builder-components-table .tabledrag-changed-warning {
+.layout-builder-components-table .tabledrag-changed-warning,
+.layout-builder-sections-table .tabledrag-changed-warning {
   display: none !important;
 }
